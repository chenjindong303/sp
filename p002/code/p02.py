from functools import partial
import subprocess

subprocess.Popen = partial(subprocess.Popen, encoding='utf-8')
import execjs
import json
from jsonpath import jsonpath

import requests

headers = {
    "Accept": "text/plain, */*; q=0.01",
    "Accept-Language": "zh-CN,zh;q=0.9",
    "Cache-Control": "no-cache",
    "Connection": "keep-alive",
    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
    "Origin": "https://www.endata.com.cn",
    "Pragma": "no-cache",
    "Sec-Fetch-Dest": "empty",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Site": "same-origin",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36",
    "X-Requested-With": "XMLHttpRequest",
    "sec-ch-ua": "^\\^Chromium^^;v=^\\^128^^, ^\\^Not;A=Brand^^;v=^\\^24^^, ^\\^Google",
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": "^\\^Windows^^^"
}
url = "https://www.endata.com.cn/API/GetData.ashx"
data = {
    "startTime": "2024-04-01",
    "MethodName": "BoxOffice_GetMonthBox"
}
response = requests.post(url, headers=headers, data=data)

# print(type(response.content.decode("utf-8")))
# print(response.content.decode("utf-8"))
# print(response)

# data = "21BC7C7DAB77E24EB6FE4BEA1C2BB2012EFB69C19F0FFEBBDAE996A7F890C1FA380126AAD75325315252999EF2957566F38C855D5539920E35A60664364638527F92D47EE6C110B23B9CF1274F4D2E954981EED24984F25A4E4BEE4B7473E9D59EC6DDA6D53F7BD3D373233F36EE38D013B3CD3CA639C6383FE5D64799C170DF1C838DADA4689887A0B022C65500049B216E3E4CDABEF5E0AF038C89ADD2614E6A525994AC03D3FE56E4AF5676C47B5619F75A913695434053B64F82055737FDBDA16C0D7AD0419C9D37876093E34C548CA46C3DF6B442E68ABF5E7632798E46BB185E8D05ED8C8DE093F5252CC90794824AD72396E9B1A5DD2E1C3A73A3D427EDD6B6FB414160DC77FA3938E4FF5EDFA53901E9BB603522046830569F728F1116BFFD2465FECA836BA45DC4224FE8EF2F4BA2D8B287465D6CE962DA93811C5D83DCA7CB5DC03E0661EB71FE5BF739355D96F61CE26BE142FC08AD27D71CBA1C09F560BA183650CE869B807F1B0449E852ECA4FABEAFAFDB58ADFAA65FEB30E4365DE83E5E78B66CC8C5F397489A9FF0A14E7CF71CA12EF59E2E176F46EE38D013B3CD3CA2BC1FF39D8B9BD6180299895C298FE3001794BA54020746C154484A98A2637A99848D260F6C4509D14C996D24FB5B04352B5FCF0D5DD0E05797EDBC2A4DC6D917B35F1C82611A614B2F16B464B34CB9D2DC79ACC9ADEC84C8EE90143032C297AC10FCCE6D80EB88980D8F8088E7DDC6D89C7F51C8B2987C8B1F813451ADAFA9CE7FCAEA7AC178A6C52AAA9C59E28F4887D2A27029339C1457839E86DE2F673CD5E9927D60D22CEE0A8DEAD5F8429F15553B3E5B54BCA9447D53812926BAF8D0D1737813CF8720AF5A6ADA77466C68E06930EAD14F9F17C51A06D479C671416CAA9907BAA21D7579A42D6436214FD440E9339A637B69B0A4DC19E5CC60F619F13B5746A7D63DEFA40DF9418B4F32A57B0F60B2FA460F4ED2B356CA6C6EF251D8E2385D696AEC23843AFB9EBCBD5FD00B5154484A98A2637A90814057EE64735C806745127BBE9ADCAB8775919EC9D6B5ACFFE4327EA1128297C287FB889E69F2C8D1843CDC8D1D5140CEC31B44698FD0A6A02D838DAE44CD2039A00DF3CCF27B6CA416278A4126EA791C756E4F6E4754F300C313E7781B84AB12D151157224E05C0D7F18B1BEB0FEC5449677D575BAD699B52234A7732950F89D9FB95F64D8194160CC724CAB8B63A0BD909D71E8C8D0CC536FC69A1C3779DC239DE52F0ACD00DDE633F6CBE006D0AFFF6FFAE01BFDEF65D6C6E589869B6BB6484A126C4527945F7C276991FEA6CA34E666CDF314DDB356EE38D013B3CD3CA59A8C6E3FD8BAAFD9C170DF1C838DADA4689887A0B022C65F20ACB4B7BF4B318ABEF5E0AF038C89AE062BFC18672315994AE4FDC9B53B0B419C7790566F88252017148030D6D51C9A798454A5A9E168D039020AD56DD938808CBE78BBE350A2A8CDCA8DB52C50A03F1D7ECC9A1E2B2C0B2AD386CBC5B0D7DCF0A5C81DCA73FCE91A3921FB4A8F22957515BB5F297DF148876F583F0372F8F0BFE1CBE002B46D2FCA88B872FC264741DB496C090B69765B9A71B825368D156C866641742A63A970927A960ABF3D3C74EE240CA4848C1A60A8D6DB8A080DF4D72D0F6B3611FB11807652B75D6CCDED6C44299AE65FD894BCDF47E777F23D6E4EFCC13085E775F43E4A5348197D6BD9AAA489EB07E23F60A56D6483C07311008DE670B9DB8485D40C855A036FED07803EB025BEEB685C7C2117771344FF33ED478A83FA27EB4AC462F0181B8A5E4CA4B521782D83F2AA086EDFBBCEB21E551319875D688B05E25CE7DB0B775D2C7ED6A6FE7B9F5AB713E003DB63357AE74A8B2B8CCD0CB855C4F13FA9517E7E4DFFFFC936D9ABE73CAE33F4414E21AD54402791B7522F09D4856691B7D3F60559C8FE17542FE47A06151FBE03D35B48EE817006344F952D04D9423A71B7BBD793AF565D97E669C6EC4CBEA5BA689BCDD81839EED05D71BFA0573CE1799EB3E87B2111E26BE230A9D13FCE57420FD9460FBCC0BD09CC5BD2EE64B3C56B09FAEF0E172759339A637B69B0A4D80DA2B6B5B41F8AC87B9124F2FCBA3EAE65A5E43A2F88AF1F60B2FA460F4ED2B404C9E2CB04940B82385D696AEC23843B594690F6AEF6B59154484A98A2637A94A21569FD008DFD206745127BBE9ADCAB8775919EC9D6B5AFE895D7184A1CC517C287FB889E69F2C8D1843CDC8D1D5140CEC31B44698FD0A6A02D838DAE44CD2039A00DF3CCF27B6CA416278A4126EA71D90623881574D746A98722055166C89F6D12B65528B3701BB22D6A48FD3FAC1C71629A7F26726276349C401B2A8C51189D9FB95F64D819406978E7CFF9924CF143AFC4AAEC6ED9EA50A1E09250EF423C239DE52F0ACD00DE3FE42928CFA0C0AFFF6FFAE01BFDEF609B8E15E256A8EFED2EC08AF0D7F94D878E047F6D66DE53BDC7763ACD5EDFEB44C7E0ACC826A2A91655DFD552218088DEFCC13085E775F43E4A5348197D6BD9AAA489EB07E23F60A01AB8EF54F19A8A7DE670B9DB8485D40E07712A4C2AFDB09EB025BEEB685C7C2117771344FF33ED478A83FA27EB4AC46F05B5BD49890B49E521782D83F2AA086EDFBBCEB21E551319875D688B05E25CE7DB0B775D2C7ED6A6FE7B9F5AB713E003DB63357AE74A8B2B8CCD0CB855C4F13FA9517E7E4DFFFFC936D9ABE73CAE33F4414E21AD54402791170A89D3435A604CEBC3D205767C559C2F1A9B591ECF4DFB450C7B76E926F3D91E488D7FF83B404A71B7BBD793AF565D97E669C6EC4CBEA0D2EF796DA4749842483195A7AA3341D1799EB3E87B2111E9AA5A55A6845C57D6954964BF2893E15D09CC5BD2EE64B3CE0894ED21EF724AF425316B60BCF699CCB789284ABD2368953F7BD3D373233F36EE38D013B3CD3CA496113588AAA26459C170DF1C838DADA4689887A0B022C652E3229E92538814DABEF5E0AF038C89A9EBCA1446F18F2206378815C55229D1F19C7790566F88252017148030D6D51C91FDCAF6E4CE665F6A3992AB7084A13AA08CBE78BBE350A2A8CDCA8DB52C50A03F1D7ECC9A1E2B2C0B2AD386CBC5B0D7DCF0A5C81DCA73FCEA42A5D111AE52E9482B8155E230E30685BEC85A2122C14639577B8C65A20F24ABD67DE3882EBA61948FEACF51FDE95F2B9A71B825368D156C866641742A63A97BB0F336F84395D6A4EE240CA4848C1A6125DD051D539DF202610B8E3EC07D6ABC938B95FA9168560C44299AE65FD894B2B5582571B196A92EFCC13085E775F435F0188A2D88CD52ED4E1550A1398AC35C603970EF79E1C3CADD0436F5E8447236350E321FAF8E42EB834F00D79313C89060A5755BBFCFC2CEF27619A960B16A820224812896BAF7314C996D24FB5B04352B5FCF0D5DD0E0509430F8021C3D78D7B35F1C82611A614B2F16B464B34CB9D2DC79ACC9ADEC84C8EE90143032C297AC10FCCE6D80EB88980D8F8088E7DDC6D89C7F51C8B2987C87313D86F77F11CAD3B50DB0F5090EFA69A9CC70F44C9E091E15EB5BF00AB6B19BBD33818786A53B15E9927D60D22CEE0F777C72C205F25F7AB6B0626F5A3E1FE546D4FFDD0AD83DA1799EB3E87B2111E9F2FA4A524D9F2FA93E5949C27D9B398D09CC5BD2EE64B3C3C5D6D11953A6748D1014C5C622D72ACE78B66CC8C5F39742C8EC5259ECBB13EFEC7C02E35AC4CF16EE38D013B3CD3CA2BC1FF39D8B9BD6180299895C298FE309F30CD2032E44735E9E48DDB6723F82027EBDE76A2A801C0FD12C1489DF51EFA83AC39577D59D50F5ECA7724EE0D5DF2ED45E6A41CCB0507E0F56624EF175E0BFAAA2225F86A8665D2AD84001F550A0DC385D8815FC19D413B934C0D7B46B9EB61E793C62B912AC413850B6382376F4E731564D597F552821FD604A9BB7F8DBC6A2A106A3FA0CA1D54D304C3F20590FF48EEBAF9876331E2FFE5C55AC6800AEF64DA086CC244F82CB5A9BFE3B4A1623A1737813CF8720AF5E651C2B1C290521D9BB2D38EF4CD4A4B32DB79C4B1FC587AF0E3C99198E9A35AF522AA4BD64F3E68E78B66CC8C5F397413C92EFD2E880576429B0FBEAAAA33136EE38D013B3CD3CAE9BCDB1873EFD31580299895C298FE30AE62CA351BD2BA73E9E48DDB6723F8207514EE0DA507AD2A06745127BBE9ADCAC70481BD02EC094D7C287FB889E69F2C054D17A0FB6DBB647F999C870FD02D52E8D9AF99A331F97B44D13AC46BBFF5A43B539B78B95540D89DF6652480E32068CD802076EA4C964038783D4AD1985C4CC371A5233B2ABD4C202888F4CCF125AAEF9BC4C0F089E70DA58213F4A51DDBEF553522FDF0CD1A052E5C8DC4977B186D42594AB41B5C9CF83D8904CA7687C12B"
# data = response.content.decode("utf-8")
data = response.text
with open('p02返回DES-混淆.js', encoding='utf-8') as f:
    js_code = f.read()

compile_obj = execjs.compile(js_code)
result1 = compile_obj.call("get_data", data)  # 调用方法，依次传递参数
# print(result1)
# print(type(result1))  # str
res_list = jsonpath(json.loads(result1), "$..Table")[0]
# print(res_list)
for res in res_list:
    item = dict()
    item['title'] = jsonpath(res, "$..MovieName")[0]
    item['releaseTime'] = jsonpath(res, "$..releaseTime")[0]
    print(item)


